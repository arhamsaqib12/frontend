{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alina\\\\Desktop\\\\twitter\\\\twitter\\\\src\\\\Pages\\\\chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\"); // Adjust based on your backend's address\n\nexport default function Chat() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const [receiverId, setReceiverId] = useState(null); // This should be set based on the user selection\n  const senderId = localStorage.getItem('userId'); // Assume senderId is stored in local storage\n\n  useEffect(() => {\n    if (receiverId) {\n      // Fetch chat history\n      axios.get(`/api/chat/history/${senderId}/${receiverId}`).then(response => {\n        setMessages(response.data);\n      }).catch(error => {\n        console.error('Error fetching chat history:', error);\n      });\n\n      // Listen for new messages\n      socket.on('receiveMessage', newMessage => {\n        setMessages(prevMessages => [...prevMessages, newMessage]);\n      });\n    }\n    return () => {\n      socket.off('receiveMessage');\n    };\n  }, [receiverId]);\n  const sendMessage = () => {\n    const newMessage = {\n      senderId,\n      receiverId,\n      content: message\n    };\n    socket.emit('sendMessage', newMessage);\n    axios.post('/api/chat/send', newMessage).then(response => {\n      setMessages([...messages, response.data]);\n      setMessage('');\n    }).catch(error => {\n      console.error('Error sending message:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.senderId === senderId ? 'sent' : 'received'}`,\n        children: msg.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"Scbptvm45h72y7nUoCnvOEdPYBA=\");\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","io","axios","jsxDEV","_jsxDEV","socket","Chat","_s","messages","setMessages","message","setMessage","receiverId","setReceiverId","senderId","localStorage","getItem","get","then","response","data","catch","error","console","on","newMessage","prevMessages","off","sendMessage","content","emit","post","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Alina/Desktop/twitter/twitter/src/Pages/chat.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\n\r\nconst socket = io(\"http://localhost:5000\"); // Adjust based on your backend's address\r\n\r\nexport default function Chat() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const [receiverId, setReceiverId] = useState(null); // This should be set based on the user selection\r\n  const senderId = localStorage.getItem('userId'); // Assume senderId is stored in local storage\r\n\r\n  useEffect(() => {\r\n    if (receiverId) {\r\n      // Fetch chat history\r\n      axios.get(`/api/chat/history/${senderId}/${receiverId}`)\r\n        .then(response => {\r\n          setMessages(response.data);\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching chat history:', error);\r\n        });\r\n\r\n      // Listen for new messages\r\n      socket.on('receiveMessage', (newMessage) => {\r\n        setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      socket.off('receiveMessage');\r\n    };\r\n  }, [receiverId]);\r\n\r\n  const sendMessage = () => {\r\n    const newMessage = { senderId, receiverId, content: message };\r\n    socket.emit('sendMessage', newMessage);\r\n\r\n    axios.post('/api/chat/send', newMessage)\r\n      .then(response => {\r\n        setMessages([...messages, response.data]);\r\n        setMessage('');\r\n      })\r\n      .catch(error => {\r\n        console.error('Error sending message:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"messages\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`message ${msg.senderId === senderId ? 'sent' : 'received'}`}>\r\n            {msg.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        value={message}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n        placeholder=\"Type a message...\"\r\n      />\r\n      <button onClick={sendMessage}>Send</button>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}