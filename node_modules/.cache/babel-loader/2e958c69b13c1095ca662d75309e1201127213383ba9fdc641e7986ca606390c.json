{"ast":null,"code":"const http = require('http');\nconst socketIo = require('socket.io');\nconst {\n  Users,\n  Messages\n} = require('.'); // Adjust path accordingly\n\nconst server = http.createServer(app);\nconst io = socketIo(server);\nio.on('connection', socket => {\n  console.log('A user connected:', socket.id);\n  socket.on('join', async userId => {\n    socket.userId = userId;\n    console.log(`User ${userId} joined`);\n  });\n  socket.on('sendMessage', async data => {\n    const {\n      receiverId,\n      content\n    } = data;\n    try {\n      const message = await Messages.create({\n        senderId: socket.userId,\n        receiverId,\n        content\n      });\n      io.to(receiverId).emit('receiveMessage', message);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  });\n  socket.on('disconnect', () => {\n    console.log('User disconnected:', socket.id);\n  });\n});\nserver.listen(5000, () => {\n  console.log('Server is running on port 5000');\n});","map":{"version":3,"names":["http","require","socketIo","Users","Messages","server","createServer","app","io","on","socket","console","log","id","userId","data","receiverId","content","message","create","senderId","to","emit","error","listen"],"sources":["C:/Users/Alina/Desktop/twitter/twitter/src/Pages/chat.jsx"],"sourcesContent":["const http = require('http');\r\nconst socketIo = require('socket.io');\r\nconst { Users, Messages } = require('.'); // Adjust path accordingly\r\n\r\nconst server = http.createServer(app);\r\nconst io = socketIo(server);\r\n\r\nio.on('connection', (socket) => {\r\n  console.log('A user connected:', socket.id);\r\n\r\n  socket.on('join', async (userId) => {\r\n    socket.userId = userId;\r\n    console.log(`User ${userId} joined`);\r\n  });\r\n\r\n  socket.on('sendMessage', async (data) => {\r\n    const { receiverId, content } = data;\r\n\r\n    try {\r\n      const message = await Messages.create({\r\n        senderId: socket.userId,\r\n        receiverId,\r\n        content\r\n      });\r\n\r\n      io.to(receiverId).emit('receiveMessage', message);\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n    }\r\n  });\r\n\r\n  socket.on('disconnect', () => {\r\n    console.log('User disconnected:', socket.id);\r\n  });\r\n});\r\n\r\nserver.listen(5000, () => {\r\n  console.log('Server is running on port 5000');\r\n});\r\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAW,CAAC;AACrC,MAAM;EAAEE,KAAK;EAAEC;AAAS,CAAC,GAAGH,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;;AAE1C,MAAMI,MAAM,GAAGL,IAAI,CAACM,YAAY,CAACC,GAAG,CAAC;AACrC,MAAMC,EAAE,GAAGN,QAAQ,CAACG,MAAM,CAAC;AAE3BG,EAAE,CAACC,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;EAC9BC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,MAAM,CAACG,EAAE,CAAC;EAE3CH,MAAM,CAACD,EAAE,CAAC,MAAM,EAAE,MAAOK,MAAM,IAAK;IAClCJ,MAAM,CAACI,MAAM,GAAGA,MAAM;IACtBH,OAAO,CAACC,GAAG,CAAC,QAAQE,MAAM,SAAS,CAAC;EACtC,CAAC,CAAC;EAEFJ,MAAM,CAACD,EAAE,CAAC,aAAa,EAAE,MAAOM,IAAI,IAAK;IACvC,MAAM;MAAEC,UAAU;MAAEC;IAAQ,CAAC,GAAGF,IAAI;IAEpC,IAAI;MACF,MAAMG,OAAO,GAAG,MAAMd,QAAQ,CAACe,MAAM,CAAC;QACpCC,QAAQ,EAAEV,MAAM,CAACI,MAAM;QACvBE,UAAU;QACVC;MACF,CAAC,CAAC;MAEFT,EAAE,CAACa,EAAE,CAACL,UAAU,CAAC,CAACM,IAAI,CAAC,gBAAgB,EAAEJ,OAAO,CAAC;IACnD,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC,CAAC;EAEFb,MAAM,CAACD,EAAE,CAAC,YAAY,EAAE,MAAM;IAC5BE,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,MAAM,CAACG,EAAE,CAAC;EAC9C,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFR,MAAM,CAACmB,MAAM,CAAC,IAAI,EAAE,MAAM;EACxBb,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;AAC/C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}