{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alina\\\\Desktop\\\\twitter\\\\twitter\\\\src\\\\Pages\\\\chat.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst Chat = ({\n  otherUserId\n}) => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const userToken = localStorage.getItem('token'); // Get the token from local storage\n  const userId = userToken ? parseJwt(userToken).id : null; // Assume the token contains the user ID in its payload\n\n  const roomId = generateRoomId(userId, otherUserId);\n  useEffect(() => {\n    if (!userId) return; // Early return if userId is not available\n\n    // Join the room\n    socket.emit('joinRoom', {\n      roomId,\n      userId\n    });\n\n    // Listen for messages\n    socket.on('message', message => {\n      console.log('Received message:', message); // Debugging\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n    return () => {\n      socket.off('message');\n    };\n  }, [roomId, userId]);\n  const sendMessage = () => {\n    if (message.trim() === '') return; // Do not send empty messages\n\n    socket.emit('chatMessage', {\n      roomId,\n      message\n    });\n    setMessage(''); // Clear the input after sending\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: msg\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n// Helper function to decode the JWT token\n_s(Chat, \"WDgp24k/FdZO6Mwa4GS0i45C6ek=\");\n_c = Chat;\nfunction parseJwt(token) {\n  if (!token) {\n    return {};\n  }\n  const base64Url = token.split('.')[1];\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n  return JSON.parse(jsonPayload);\n}\nfunction generateRoomId(userId1, userId2) {\n  const sortedIds = [userId1, userId2].sort();\n  return `${sortedIds[0]}_${sortedIds[1]}`;\n}\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useState","io","jsxDEV","_jsxDEV","socket","Chat","otherUserId","_s","message","setMessage","messages","setMessages","userToken","localStorage","getItem","userId","parseJwt","id","roomId","generateRoomId","emit","on","console","log","prevMessages","off","sendMessage","trim","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","c","charCodeAt","toString","slice","join","JSON","parse","userId1","userId2","sortedIds","sort","$RefreshReg$"],"sources":["C:/Users/Alina/Desktop/twitter/twitter/src/Pages/chat.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst Chat = ({ otherUserId }) => {\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const userToken = localStorage.getItem('token'); // Get the token from local storage\r\n    const userId = userToken ? parseJwt(userToken).id : null; // Assume the token contains the user ID in its payload\r\n\r\n    const roomId = generateRoomId(userId, otherUserId);\r\n\r\n    useEffect(() => {\r\n        if (!userId) return; // Early return if userId is not available\r\n\r\n        // Join the room\r\n        socket.emit('joinRoom', { roomId, userId });\r\n\r\n        // Listen for messages\r\n        socket.on('message', (message) => {\r\n            console.log('Received message:', message); // Debugging\r\n            setMessages((prevMessages) => [...prevMessages, message]);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('message');\r\n        };\r\n    }, [roomId, userId]);\r\n\r\n    const sendMessage = () => {\r\n        if (message.trim() === '') return; // Do not send empty messages\r\n\r\n        socket.emit('chatMessage', { roomId, message });\r\n        setMessage(''); // Clear the input after sending\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {messages.map((msg, index) => (\r\n                    <div key={index}>{msg}</div>\r\n                ))}\r\n            </div>\r\n            <input\r\n                type=\"text\"\r\n                value={message}\r\n                onChange={(e) => setMessage(e.target.value)}\r\n            />\r\n            <button onClick={sendMessage}>Send</button>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Helper function to decode the JWT token\r\nfunction parseJwt(token) {\r\n    if (!token) { return {}; }\r\n    const base64Url = token.split('.')[1];\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n    }).join(''));\r\n    return JSON.parse(jsonPayload);\r\n}\r\n\r\nfunction generateRoomId(userId1, userId2) {\r\n    const sortedIds = [userId1, userId2].sort();\r\n    return `${sortedIds[0]}_${sortedIds[1]}`;\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}