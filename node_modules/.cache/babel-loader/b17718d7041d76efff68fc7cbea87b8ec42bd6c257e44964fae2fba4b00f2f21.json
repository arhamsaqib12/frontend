{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alina\\\\Desktop\\\\twitter\\\\twitter\\\\src\\\\Pages\\\\hashtag.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Hashtag() {\n  _s();\n  const {\n    hashtag\n  } = useParams(); // Get the hashtag from the URL\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchPostsByHashtag = async () => {\n      setError(null);\n      try {\n        const response = await fetch(`https://twit-backend-production.up.railway.app/api/posts/search?q=${hashtag}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `${localStorage.getItem('token')}`\n          }\n        });\n        if (!response.ok) {\n          const errorText = await response.text(); // Capture the error message\n          throw new Error(`Failed to fetch posts for hashtag: ${errorText}`);\n        }\n        const data = await response.json();\n        setPosts(data.posts || []); // Default to empty array\n      } catch (error) {\n        setError(error.message || 'An unknown error occurred');\n      }\n    };\n    fetchPostsByHashtag();\n  }, [hashtag]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid bg-black p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-white\",\n      children: [\"Posts for #\", hashtag]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this), posts.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-4 mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card bg-dark text-white\",\n          children: [post.image && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: post.media,\n            className: \"card-img-top\",\n            alt: post.caption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title\",\n              children: post.caption\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: [\"Posted by \", post.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this)\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-white\",\n      children: \"No posts found for this hashtag.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(Hashtag, \"/sIwBnSDUTChZM7QoKZ2bT/kqME=\", false, function () {\n  return [useParams];\n});\n_c = Hashtag;\nvar _c;\n$RefreshReg$(_c, \"Hashtag\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","Hashtag","_s","hashtag","posts","setPosts","error","setError","fetchPostsByHashtag","response","fetch","method","headers","localStorage","getItem","ok","errorText","text","Error","data","json","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","post","image","src","media","alt","caption","name","id","_c","$RefreshReg$"],"sources":["C:/Users/Alina/Desktop/twitter/twitter/src/Pages/hashtag.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nexport default function Hashtag() {\r\n  const { hashtag } = useParams(); // Get the hashtag from the URL\r\n  const [posts, setPosts] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchPostsByHashtag = async () => {\r\n      setError(null);\r\n      try {\r\n        const response = await fetch(`https://twit-backend-production.up.railway.app/api/posts/search?q=${hashtag}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `${localStorage.getItem('token')}`,\r\n          }\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const errorText = await response.text(); // Capture the error message\r\n          throw new Error(`Failed to fetch posts for hashtag: ${errorText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        setPosts(data.posts || []); // Default to empty array\r\n      } catch (error) {\r\n        setError(error.message || 'An unknown error occurred');\r\n      }\r\n    };\r\n\r\n    fetchPostsByHashtag();\r\n  }, [hashtag]);\r\n\r\n  return (\r\n    <div className=\"container-fluid bg-black p-4\">\r\n      <h1 className=\"text-white\">Posts for #{hashtag}</h1>\r\n\r\n      {error && <div className=\"alert alert-danger\">Error: {error}</div>}\r\n      {posts.length > 0 ? (\r\n        <div className=\"row\">\r\n          {posts.map((post) => (\r\n            <div key={post.id} className=\"col-md-4 mb-4\">\r\n              <div className=\"card bg-dark text-white\">\r\n                {post.image && (\r\n                  <img src={post.media} className=\"card-img-top\" alt={post.caption} />\r\n                )}\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\">{post.caption}</h5>\r\n                  <p className=\"card-text\">Posted by {post.name}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p className=\"text-white\">No posts found for this hashtag.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}