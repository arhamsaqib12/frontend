{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alina\\\\Desktop\\\\twitter\\\\twitter\\\\src\\\\Pages\\\\tweets.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tweets() {\n  _s();\n  const [tweets, setTweets] = useState([]);\n  useEffect(() => {\n    const fetchTweets = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/posts/', {\n          headers: {\n            \"authorization\": `${token}` // Include the token in the Authorization header\n            // \"Content-Type\": \"multipart/form-data\" // Uncommenting this line will break the request\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setTweets(data);\n      } catch (error) {\n        console.error(\"Error fetching tweets:\", error);\n      }\n    };\n    fetchTweets();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: tweets.map(tweet => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [tweet.media && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: tweet.media,\n          alt: \"Tweet media\",\n          className: \"card-img-top mb-3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: tweet.postText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-muted\",\n            children: new Date(tweet.createdAt).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)\n    }, tweet.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(Tweets, \"tlPhWtKxaAnAviYMgoNvFaAwXFo=\");\n_c = Tweets;\nvar _c;\n$RefreshReg$(_c, \"Tweets\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Tweets","_s","tweets","setTweets","fetchTweets","response","fetch","headers","token","ok","Error","status","data","json","error","console","className","children","map","tweet","media","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","postText","Date","createdAt","toLocaleString","id","_c","$RefreshReg$"],"sources":["C:/Users/Alina/Desktop/twitter/twitter/src/Pages/tweets.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport default function Tweets() {\r\n  const [tweets, setTweets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchTweets = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/posts/', {  headers: {\r\n          \"authorization\": `${token}`, // Include the token in the Authorization header\r\n          // \"Content-Type\": \"multipart/form-data\" // Uncommenting this line will break the request\r\n        }});\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        setTweets(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching tweets:\", error);\r\n      }\r\n    };\r\n\r\n    fetchTweets();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      {tweets.map(tweet => (\r\n        <div key={tweet.id} className=\"card mb-3\">\r\n          <div className=\"card-body\">\r\n            {tweet.media && <img src={tweet.media} alt=\"Tweet media\" className=\"card-img-top mb-3\" />}\r\n            <p className=\"card-text\">{tweet.postText}</p>\r\n            <p className=\"card-text\"><small className=\"text-muted\">{new Date(tweet.createdAt).toLocaleString()}</small></p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMO,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;UAAGC,OAAO,EAAE;YAC3E,eAAe,EAAE,GAAGC,KAAK,EAAE,CAAE;YAC7B;UACF;QAAC,CAAC,CAAC;QACH,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBL,QAAQ,CAACM,MAAM,EAAE,CAAC;QAC3D;QACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClCV,SAAS,CAACS,IAAI,CAAC;MACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDV,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKiB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC5Bf,MAAM,CAACgB,GAAG,CAACC,KAAK,iBACfpB,OAAA;MAAoBiB,SAAS,EAAC,WAAW;MAAAC,QAAA,eACvClB,OAAA;QAAKiB,SAAS,EAAC,WAAW;QAAAC,QAAA,GACvBE,KAAK,CAACC,KAAK,iBAAIrB,OAAA;UAAKsB,GAAG,EAAEF,KAAK,CAACC,KAAM;UAACE,GAAG,EAAC,aAAa;UAACN,SAAS,EAAC;QAAmB;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACzF3B,OAAA;UAAGiB,SAAS,EAAC,WAAW;UAAAC,QAAA,EAAEE,KAAK,CAACQ;QAAQ;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7C3B,OAAA;UAAGiB,SAAS,EAAC,WAAW;UAAAC,QAAA,eAAClB,OAAA;YAAOiB,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAE,IAAIW,IAAI,CAACT,KAAK,CAACU,SAAS,CAAC,CAACC,cAAc,CAAC;UAAC;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5G;IAAC,GALEP,KAAK,CAACY,EAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMb,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACzB,EAAA,CApCuBD,MAAM;AAAAgC,EAAA,GAANhC,MAAM;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}