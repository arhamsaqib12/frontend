{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alina\\\\Desktop\\\\twitter\\\\twitter\\\\src\\\\Pages\\\\tweets.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tweets = () => {\n  _s();\n  const [tweets, setTweets] = useState([]);\n  const [users, setUsers] = useState({});\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(true);\n  const fetchTweets = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/posts', {\n        method: 'GET',\n        headers: {\n          'Authorization': `${localStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Error fetching tweets: ${response.status}`);\n      }\n      const data = await response.json();\n      setTweets(data);\n      fetchUsers(data);\n    } catch (error) {\n      console.error('Error fetching tweets:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchUsers = async tweets => {\n    const userIds = [...new Set(tweets.map(tweet => tweet.userId))];\n    userIds.forEach(async userId => {\n      if (!users[userId]) {\n        try {\n          const userResponse = await fetch(`http://localhost:5000/api/posts/user/${userId}`, {\n            method: 'GET',\n            headers: {\n              'Authorization': `${localStorage.getItem('token')}`\n            }\n          });\n          if (userResponse.ok) {\n            const userData = await userResponse.json();\n            setUsers(prevUsers => ({\n              ...prevUsers,\n              [userId]: userData\n            }));\n          }\n        } catch (error) {\n          console.error('Error fetching user data:', error);\n        }\n      }\n    });\n  };\n  useEffect(() => {\n    fetchTweets();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-info\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 39\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container \",\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"p-0\",\n      children: tweets.map(tweet => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"  border border-secondary bg-black text-white list-unstyled pb-3 \",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"media\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"media-body\",\n            children: [users[tweet.userId] && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"py-2 ps-3\",\n                children: [users[tweet.userId].name, ' ', /*#__PURE__*/_jsxDEV(\"small\", {\n                  className: \"text-secondary\",\n                  children: [\"@\", users[tweet.userId].email]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  className: \"text-muted\",\n                  children: new Date(tweet.createdAt).toLocaleString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"ps-3 fw-light\",\n              children: tweet.postText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this), tweet.media && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `http://localhost:5000/public/${tweet.media}`,\n              className: \" ps-5  prounded \",\n              alt: \"Tweet Media\",\n              style: {\n                width: \"100%\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)\n      }, tweet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(Tweets, \"zLLnsnLb9KYnfmH5FUQtSfc1FUA=\");\n_c = Tweets;\nexport default Tweets;\nvar _c;\n$RefreshReg$(_c, \"Tweets\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Tweets","_s","tweets","setTweets","users","setUsers","error","setError","loading","setLoading","fetchTweets","response","fetch","method","headers","localStorage","getItem","ok","Error","status","data","json","fetchUsers","console","message","userIds","Set","map","tweet","userId","forEach","userResponse","userData","prevUsers","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","email","Date","createdAt","toLocaleString","postText","media","src","alt","style","width","id","_c","$RefreshReg$"],"sources":["C:/Users/Alina/Desktop/twitter/twitter/src/Pages/tweets.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst Tweets = () => {\r\n  const [tweets, setTweets] = useState([]);\r\n  const [users, setUsers] = useState({});\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchTweets = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/posts', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Error fetching tweets: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      setTweets(data);\r\n      fetchUsers(data);\r\n    } catch (error) {\r\n      console.error('Error fetching tweets:', error);\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchUsers = async (tweets) => {\r\n    const userIds = [...new Set(tweets.map(tweet => tweet.userId))];\r\n    userIds.forEach(async (userId) => {\r\n      if (!users[userId]) {\r\n        try {\r\n          const userResponse = await fetch(`http://localhost:5000/api/posts/user/${userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n              'Authorization': `${localStorage.getItem('token')}`,\r\n            },\r\n          });\r\n\r\n          if (userResponse.ok) {\r\n            const userData = await userResponse.json();\r\n            setUsers((prevUsers) => ({ ...prevUsers, [userId]: userData }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching user data:', error);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTweets();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div className=\"container\"><div className=\"alert alert-info\">Loading...</div></div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container \">\r\n      {error && <div className=\"alert alert-danger\">Error: {error}</div>}\r\n      <ul className=\"p-0\">\r\n        {tweets.map((tweet) => (\r\n          <li key={tweet.id} className=\"  border border-secondary bg-black text-white list-unstyled pb-3 \">\r\n            <div className=\"media\">\r\n              <div className=\"media-body\">\r\n                {users[tweet.userId] && (\r\n                  <span>\r\n                  \r\n                  <h5 className=\"py-2 ps-3\">\r\n                    {users[tweet.userId].name }{' '}\r\n                    <small className=\"text-secondary\">@{users[tweet.userId].email}</small>\r\n                    \r\n                <small className=\"text-muted\">{new Date(tweet.createdAt).toLocaleString()}</small>\r\n                  </h5>\r\n\r\n                  </span>\r\n                )}\r\n                <h5 className=\"ps-3 fw-light\">{tweet.postText}</h5>\r\n                {tweet.media && (\r\n                  <img\r\n                    src={`http://localhost:5000/public/${tweet.media}`}\r\n                    className=\" ps-5  prounded \"\r\n                    alt=\"Tweet Media\"\r\n                    style={{  width : \"100%\" \r\n                    }}\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tweets;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}