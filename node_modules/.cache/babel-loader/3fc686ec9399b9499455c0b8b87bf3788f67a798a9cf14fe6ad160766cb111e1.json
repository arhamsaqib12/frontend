{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alina\\\\Desktop\\\\twitter\\\\twitter\\\\src\\\\Pages\\\\chat.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst Chat = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]); // List of users\n  const [filteredUsers, setFilteredUsers] = useState([]); // Filtered users based on search input\n  const [searchQuery, setSearchQuery] = useState(''); // Search input state\n  const [otherUserId, setOtherUserId] = useState(null);\n  const userToken = localStorage.getItem('token'); // Get token from local storage\n  const userId = userToken ? parseJwt(userToken).id : null; // Get user ID from token\n\n  const roomId = otherUserId ? generateRoomId(userId, otherUserId) : null;\n  useEffect(() => {\n    if (!userId) return; // No user ID available\n\n    if (roomId) {\n      // Join the room\n      socket.emit('joinRoom', {\n        roomId,\n        userId\n      });\n\n      // Listen for messages\n      socket.on('message', message => {\n        setMessages(prevMessages => [...prevMessages, message]);\n      });\n      return () => {\n        socket.off('message');\n      };\n    }\n  }, [roomId, userId, otherUserId]);\n  const sendMessage = () => {\n    if (message.trim() === '' || !roomId) return; // Don't send empty messages or if roomId is not available\n\n    socket.emit('chatMessage', {\n      roomId,\n      message\n    });\n    setMessage(''); // Clear input field\n  };\n\n  // Handle search input\n  const handleSearchChange = e => {\n    setSearchQuery(e.target.value);\n\n    // Fetch users based on search input\n    const fetchUsers = async (req, re) => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/posts/search?q=${e.target.value}`, {\n          headers: {\n            Authorization: `${localStorage.getItem('token')}`\n          }\n        });\n\n        // Ensure the data is an array, even if no results\n        setFilteredUsers(res.JSON);\n      } catch (error) {\n        console.error('Error searching users:', error);\n        setFilteredUsers([]); // Reset to an empty array in case of error\n      }\n    };\n    fetchUsers();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select a User to Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search users...\",\n        value: searchQuery,\n        onChange: handleSearchChange // Handle search input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: filteredUsers.length > 0 ? filteredUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setOtherUserId(user.id),\n          children: user.name\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"No users found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: msg\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n// Helper function to decode JWT token\n_s(Chat, \"Dpp3n4VC//VSbfszr4eXaAF1/TY=\");\n_c = Chat;\nfunction parseJwt(token) {\n  if (!token) return {};\n  const base64Url = token.split('.')[1];\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n  return JSON.parse(jsonPayload);\n}\nfunction generateRoomId(userId1, userId2) {\n  const sortedIds = [userId1, userId2].sort();\n  return `${sortedIds[0]}_${sortedIds[1]}`;\n}\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useState","io","axios","jsxDEV","_jsxDEV","socket","Chat","_s","message","setMessage","messages","setMessages","users","setUsers","filteredUsers","setFilteredUsers","searchQuery","setSearchQuery","otherUserId","setOtherUserId","userToken","localStorage","getItem","userId","parseJwt","id","roomId","generateRoomId","emit","on","prevMessages","off","sendMessage","trim","handleSearchChange","e","target","value","fetchUsers","req","re","response","get","headers","Authorization","res","JSON","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","length","map","user","onClick","name","msg","index","_c","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","c","charCodeAt","toString","slice","join","parse","userId1","userId2","sortedIds","sort","$RefreshReg$"],"sources":["C:/Users/Alina/Desktop/twitter/twitter/src/Pages/chat.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst Chat = () => {\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [users, setUsers] = useState([]); // List of users\r\n    const [filteredUsers, setFilteredUsers] = useState([]); // Filtered users based on search input\r\n    const [searchQuery, setSearchQuery] = useState(''); // Search input state\r\n    const [otherUserId, setOtherUserId] = useState(null);\r\n    const userToken = localStorage.getItem('token'); // Get token from local storage\r\n    const userId = userToken ? parseJwt(userToken).id : null; // Get user ID from token\r\n\r\n    const roomId = otherUserId ? generateRoomId(userId, otherUserId) : null;\r\n\r\n    useEffect(() => {\r\n        if (!userId) return; // No user ID available\r\n\r\n        if (roomId) {\r\n            // Join the room\r\n            socket.emit('joinRoom', { roomId, userId });\r\n\r\n            // Listen for messages\r\n            socket.on('message', (message) => {\r\n                setMessages((prevMessages) => [...prevMessages, message]);\r\n            });\r\n\r\n            return () => {\r\n                socket.off('message');\r\n            };\r\n        }\r\n    }, [roomId, userId, otherUserId]);\r\n\r\n    const sendMessage = () => {\r\n        if (message.trim() === '' || !roomId) return; // Don't send empty messages or if roomId is not available\r\n\r\n        socket.emit('chatMessage', { roomId, message });\r\n        setMessage(''); // Clear input field\r\n    };\r\n\r\n    // Handle search input\r\n    const handleSearchChange = (e) => {\r\n        setSearchQuery(e.target.value);\r\n\r\n        // Fetch users based on search input\r\n        const fetchUsers = async (req,re) => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:5000/api/posts/search?q=${e.target.value}`, {\r\n                    headers: { Authorization: `${localStorage.getItem('token')}` },\r\n                });\r\n                \r\n                // Ensure the data is an array, even if no results\r\n                setFilteredUsers(res.JSON);\r\n            } catch (error) {\r\n                console.error('Error searching users:', error);\r\n                setFilteredUsers([]); // Reset to an empty array in case of error\r\n            }\r\n        };\r\n\r\n        fetchUsers();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>Select a User to Chat</h3>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search users...\"\r\n                    value={searchQuery}\r\n                    onChange={handleSearchChange} // Handle search input\r\n                />\r\n                <ul>\r\n                    {filteredUsers.length > 0 ? (\r\n                        filteredUsers.map((user) => (\r\n                            <li key={user.id} onClick={() => setOtherUserId(user.id)}>\r\n                                {user.name}\r\n                            </li>\r\n                        ))\r\n                    ) : (\r\n                        <li>No users found</li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n            <div>\r\n                <h3>Chat</h3>\r\n                <div>\r\n                    {messages.map((msg, index) => (\r\n                        <div key={index}>{msg}</div>\r\n                    ))}\r\n                </div>\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                />\r\n                <button onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Helper function to decode JWT token\r\nfunction parseJwt(token) {\r\n    if (!token) return {};\r\n    const base64Url = token.split('.')[1];\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n    const jsonPayload = decodeURIComponent(\r\n        atob(base64)\r\n            .split('')\r\n            .map(function (c) {\r\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n            })\r\n            .join('')\r\n    );\r\n    return JSON.parse(jsonPayload);\r\n}\r\n\r\nfunction generateRoomId(userId1, userId2) {\r\n    const sortedIds = [userId1, userId2].sort();\r\n    return `${sortedIds[0]}_${sortedIds[1]}`;\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,CAAC;AAE1C,MAAMK,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACc,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxD,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMoB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EACjD,MAAMC,MAAM,GAAGH,SAAS,GAAGI,QAAQ,CAACJ,SAAS,CAAC,CAACK,EAAE,GAAG,IAAI,CAAC,CAAC;;EAE1D,MAAMC,MAAM,GAAGR,WAAW,GAAGS,cAAc,CAACJ,MAAM,EAAEL,WAAW,CAAC,GAAG,IAAI;EAEvEnB,SAAS,CAAC,MAAM;IACZ,IAAI,CAACwB,MAAM,EAAE,OAAO,CAAC;;IAErB,IAAIG,MAAM,EAAE;MACR;MACArB,MAAM,CAACuB,IAAI,CAAC,UAAU,EAAE;QAAEF,MAAM;QAAEH;MAAO,CAAC,CAAC;;MAE3C;MACAlB,MAAM,CAACwB,EAAE,CAAC,SAAS,EAAGrB,OAAO,IAAK;QAC9BG,WAAW,CAAEmB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEtB,OAAO,CAAC,CAAC;MAC7D,CAAC,CAAC;MAEF,OAAO,MAAM;QACTH,MAAM,CAAC0B,GAAG,CAAC,SAAS,CAAC;MACzB,CAAC;IACL;EACJ,CAAC,EAAE,CAACL,MAAM,EAAEH,MAAM,EAAEL,WAAW,CAAC,CAAC;EAEjC,MAAMc,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAIxB,OAAO,CAACyB,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAACP,MAAM,EAAE,OAAO,CAAC;;IAE9CrB,MAAM,CAACuB,IAAI,CAAC,aAAa,EAAE;MAAEF,MAAM;MAAElB;IAAQ,CAAC,CAAC;IAC/CC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;EACpB,CAAC;;EAED;EACA,MAAMyB,kBAAkB,GAAIC,CAAC,IAAK;IAC9BlB,cAAc,CAACkB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;;IAE9B;IACA,MAAMC,UAAU,GAAG,MAAAA,CAAOC,GAAG,EAACC,EAAE,KAAK;MACjC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMvC,KAAK,CAACwC,GAAG,CAAC,4CAA4CP,CAAC,CAACC,MAAM,CAACC,KAAK,EAAE,EAAE;UAC3FM,OAAO,EAAE;YAAEC,aAAa,EAAE,GAAGvB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;UAAG;QACjE,CAAC,CAAC;;QAEF;QACAP,gBAAgB,CAAC8B,GAAG,CAACC,IAAI,CAAC;MAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9ChC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;MAC1B;IACJ,CAAC;IAEDuB,UAAU,CAAC,CAAC;EAChB,CAAC;EAED,oBACIlC,OAAA;IAAA6C,QAAA,gBACI7C,OAAA;MAAA6C,QAAA,gBACI7C,OAAA;QAAA6C,QAAA,EAAI;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9BjD,OAAA;QACIkD,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,iBAAiB;QAC7BlB,KAAK,EAAErB,WAAY;QACnBwC,QAAQ,EAAEtB,kBAAmB,CAAC;MAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC,eACFjD,OAAA;QAAA6C,QAAA,EACKnC,aAAa,CAAC2C,MAAM,GAAG,CAAC,GACrB3C,aAAa,CAAC4C,GAAG,CAAEC,IAAI,iBACnBvD,OAAA;UAAkBwD,OAAO,EAAEA,CAAA,KAAMzC,cAAc,CAACwC,IAAI,CAAClC,EAAE,CAAE;UAAAwB,QAAA,EACpDU,IAAI,CAACE;QAAI,GADLF,IAAI,CAAClC,EAAE;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEZ,CACP,CAAC,gBAEFjD,OAAA;UAAA6C,QAAA,EAAI;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MACzB;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eACNjD,OAAA;MAAA6C,QAAA,gBACI7C,OAAA;QAAA6C,QAAA,EAAI;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACbjD,OAAA;QAAA6C,QAAA,EACKvC,QAAQ,CAACgD,GAAG,CAAC,CAACI,GAAG,EAAEC,KAAK,kBACrB3D,OAAA;UAAA6C,QAAA,EAAkBa;QAAG,GAAXC,KAAK;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAC9B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACNjD,OAAA;QACIkD,IAAI,EAAC,MAAM;QACXjB,KAAK,EAAE7B,OAAQ;QACfgD,QAAQ,EAAGrB,CAAC,IAAK1B,UAAU,CAAC0B,CAAC,CAACC,MAAM,CAACC,KAAK;MAAE;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC,eACFjD,OAAA;QAAQwD,OAAO,EAAE5B,WAAY;QAAAiB,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;;AAED;AAAA9C,EAAA,CAnGMD,IAAI;AAAA0D,EAAA,GAAJ1D,IAAI;AAoGV,SAASkB,QAAQA,CAACyC,KAAK,EAAE;EACrB,IAAI,CAACA,KAAK,EAAE,OAAO,CAAC,CAAC;EACrB,MAAMC,SAAS,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACrC,MAAMC,MAAM,GAAGF,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAC9D,MAAMC,WAAW,GAAGC,kBAAkB,CAClCC,IAAI,CAACJ,MAAM,CAAC,CACPD,KAAK,CAAC,EAAE,CAAC,CACTT,GAAG,CAAC,UAAUe,CAAC,EAAE;IACd,OAAO,GAAG,GAAG,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;EAChE,CAAC,CAAC,CACDC,IAAI,CAAC,EAAE,CAChB,CAAC;EACD,OAAO/B,IAAI,CAACgC,KAAK,CAACR,WAAW,CAAC;AAClC;AAEA,SAAS3C,cAAcA,CAACoD,OAAO,EAAEC,OAAO,EAAE;EACtC,MAAMC,SAAS,GAAG,CAACF,OAAO,EAAEC,OAAO,CAAC,CAACE,IAAI,CAAC,CAAC;EAC3C,OAAO,GAAGD,SAAS,CAAC,CAAC,CAAC,IAAIA,SAAS,CAAC,CAAC,CAAC,EAAE;AAC5C;AAEA,eAAe3E,IAAI;AAAC,IAAA0D,EAAA;AAAAmB,YAAA,CAAAnB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}