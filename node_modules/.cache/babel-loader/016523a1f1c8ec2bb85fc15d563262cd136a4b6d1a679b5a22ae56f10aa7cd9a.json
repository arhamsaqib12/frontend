{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alina\\\\Desktop\\\\twitter\\\\twitter\\\\src\\\\Pages\\\\tweets.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tweets = () => {\n  _s();\n  const [tweets, setTweets] = useState([]);\n  const [users, setUsers] = useState({});\n  const [error, setError] = useState('');\n  const fetchTweets = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/posts', {\n        method: 'GET',\n        headers: {\n          'Authorization': `${localStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Error fetching tweets: ${response.status}`);\n      }\n      const data = await response.json();\n      setTweets(data);\n\n      // Fetch user details for each tweet\n      data.forEach(async tweet => {\n        if (!users[tweet.userId]) {\n          const userResponse = await fetch(`http://localhost:5000/user/${tweet.userId}`, {\n            method: 'GET',\n            headers: {\n              'Authorization': `Bearer ${localStorage.getItem('token')}`\n            }\n          });\n          if (userResponse.ok) {\n            const userData = await userResponse.json();\n            setUsers(prevUsers => ({\n              ...prevUsers,\n              [tweet.userId]: userData\n            }));\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Error fetching tweets:', error);\n      setError(error.message);\n    }\n  };\n  useEffect(() => {\n    fetchTweets();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: tweets.map(tweet => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"media\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"media-body\",\n            children: [users[tweet.userId] && /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"mt-0\",\n              children: [users[tweet.userId].name, ' ', /*#__PURE__*/_jsxDEV(\"small\", {\n                className: \"text-muted\",\n                children: [\"@\", users[tweet.userId].username]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mb-1\",\n              children: tweet.postText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this), tweet.media && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `http://localhost:5000/public/${tweet.media}`,\n              className: \"img-fluid rounded mt-2\",\n              alt: \"Tweet Media\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"text-muted\",\n              children: new Date(tweet.createdAt).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, tweet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Tweets, \"7SILma3okUFL59MMLK4QmmrScfo=\");\n_c = Tweets;\nexport default Tweets;\nvar _c;\n$RefreshReg$(_c, \"Tweets\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Tweets","_s","tweets","setTweets","users","setUsers","error","setError","fetchTweets","response","fetch","method","headers","localStorage","getItem","ok","Error","status","data","json","forEach","tweet","userId","userResponse","userData","prevUsers","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","name","username","postText","media","src","alt","Date","createdAt","toLocaleString","id","_c","$RefreshReg$"],"sources":["C:/Users/Alina/Desktop/twitter/twitter/src/Pages/tweets.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst Tweets = () => {\r\n  const [tweets, setTweets] = useState([]);\r\n  const [users, setUsers] = useState({});\r\n  const [error, setError] = useState('');\r\n\r\n  const fetchTweets = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/posts', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Error fetching tweets: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      setTweets(data);\r\n\r\n      // Fetch user details for each tweet\r\n      data.forEach(async (tweet) => {\r\n        if (!users[tweet.userId]) {\r\n          const userResponse = await fetch(`http://localhost:5000/user/${tweet.userId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n              'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n            },\r\n          });\r\n\r\n          if (userResponse.ok) {\r\n            const userData = await userResponse.json();\r\n            setUsers((prevUsers) => ({ ...prevUsers, [tweet.userId]: userData }));\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching tweets:', error);\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTweets();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      {error && <div className=\"alert alert-danger\">Error: {error}</div>}\r\n      <ul className=\"list-group\">\r\n        {tweets.map((tweet) => (\r\n          <li key={tweet.id} className=\"list-group-item\">\r\n            <div className=\"media\">\r\n              <div className=\"media-body\">\r\n                {users[tweet.userId] && (\r\n                  <h5 className=\"mt-0\">\r\n                    {users[tweet.userId].name}{' '}\r\n                    <small className=\"text-muted\">@{users[tweet.userId].username}</small>\r\n                  </h5>\r\n                )}\r\n                <p className=\"mb-1\">{tweet.postText}</p>\r\n                {tweet.media && (\r\n                  <img\r\n                    src={`http://localhost:5000/public/${tweet.media}`}\r\n                    className=\"img-fluid rounded mt-2\"\r\n                    alt=\"Tweet Media\"\r\n                  />\r\n                )}\r\n                <small className=\"text-muted\">{new Date(tweet.createdAt).toLocaleString()}</small>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tweets;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}