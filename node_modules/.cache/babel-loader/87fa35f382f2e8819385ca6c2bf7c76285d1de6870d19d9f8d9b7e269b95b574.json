{"ast":null,"code":"const express = require(\"express\");\nconst cors = require(\"cors\");\nconst path = require(\"path\");\nconst Router = require(\"./router\");\nconst AuthRouter = require(\"./auth/authrouter\");\nconst checkAuth = require(\"./auth/authmiddleware\");\nconst router = require('./Hashtag/hashtagroute'); // Import hashtag routes\nconst {\n  db\n} = require('./auth/usermodal'); // Adjust the path as necessary\nconst chatrouter = require('./Messages/chatrouter');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst {\n  Users,\n  Messages\n} = require('./auth/usermodal');\nconst app = express();\n\n// Middleware\napp.use(cors());\napp.use(express.urlencoded({\n  extended: false\n}));\napp.use(express.json());\n\n// Serve static files from the 'public' directory\nconst publicPath = path.join(__dirname, 'public');\napp.use('/public', express.static(publicPath));\n\n// Routes\napp.use(\"/api/posts\", checkAuth, Router);\napp.use(\"/api/auth\", AuthRouter);\napp.use(\"/api/hashtag\", checkAuth, router); // Add the hashtag routes with authentication middleware\napp.use('/api/chat', chatrouter);\n\n// Database sync\ndb.sync().then(() => {\n  console.log('Database & tables created!');\n}).catch(err => console.error('Error syncing database:', err));\n\n// Server and Socket.IO setup\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n  cors: {\n    origin: \"*\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\nio.on('connection', socket => {\n  console.log('A user connected:', socket.id);\n  socket.on('join', async userId => {\n    socket.userId = userId;\n    console.log(`User ${userId} joined`);\n  });\n  socket.on('sendMessage', async data => {\n    const {\n      receiverId,\n      content\n    } = data;\n    try {\n      const message = await Messages.create({\n        senderId: socket.userId,\n        receiverId,\n        content\n      });\n      io.to(receiverId).emit('receiveMessage', message);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  });\n  socket.on('disconnect', () => {\n    console.log('User disconnected:', socket.id);\n  });\n});\nconst PORT = process.env.PORT || 5000;\nserver.listen(PORT, () => console.log(`Server running on port ${PORT}`));","map":{"version":3,"names":["express","require","cors","path","Router","AuthRouter","checkAuth","router","db","chatrouter","http","socketIo","Users","Messages","app","use","urlencoded","extended","json","publicPath","join","__dirname","static","sync","then","console","log","catch","err","error","server","createServer","io","origin","methods","on","socket","id","userId","data","receiverId","content","message","create","senderId","to","emit","PORT","process","env","listen"],"sources":["C:/Users/Alina/Desktop/twitter/twitter/src/Pages/chat.jsx"],"sourcesContent":["const express = require(\"express\");\r\nconst cors = require(\"cors\");\r\nconst path = require(\"path\");\r\nconst Router = require(\"./router\");\r\nconst AuthRouter = require(\"./auth/authrouter\");\r\nconst checkAuth = require(\"./auth/authmiddleware\");\r\nconst router = require('./Hashtag/hashtagroute'); // Import hashtag routes\r\nconst { db } = require('./auth/usermodal'); // Adjust the path as necessary\r\nconst chatrouter = require('./Messages/chatrouter');\r\nconst http = require('http');\r\nconst socketIo = require('socket.io');\r\nconst { Users, Messages } = require('./auth/usermodal');\r\n\r\nconst app = express();\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(express.json());\r\n\r\n// Serve static files from the 'public' directory\r\nconst publicPath = path.join(__dirname, 'public');\r\napp.use('/public', express.static(publicPath));\r\n\r\n// Routes\r\napp.use(\"/api/posts\", checkAuth, Router);\r\napp.use(\"/api/auth\", AuthRouter);\r\napp.use(\"/api/hashtag\", checkAuth, router); // Add the hashtag routes with authentication middleware\r\napp.use('/api/chat', chatrouter);\r\n\r\n// Database sync\r\ndb.sync()\r\n  .then(() => {\r\n    console.log('Database & tables created!');\r\n  })\r\n  .catch(err => console.error('Error syncing database:', err));\r\n\r\n// Server and Socket.IO setup\r\nconst server = http.createServer(app);\r\nconst io = socketIo(server, {\r\n  cors: {\r\n    origin: \"*\",\r\n    methods: [\"GET\", \"POST\"]\r\n  }\r\n});\r\n\r\nio.on('connection', (socket) => {\r\n  console.log('A user connected:', socket.id);\r\n\r\n  socket.on('join', async (userId) => {\r\n    socket.userId = userId;\r\n    console.log(`User ${userId} joined`);\r\n  });\r\n\r\n  socket.on('sendMessage', async (data) => {\r\n    const { receiverId, content } = data;\r\n\r\n    try {\r\n      const message = await Messages.create({\r\n        senderId: socket.userId,\r\n        receiverId,\r\n        content\r\n      });\r\n\r\n      io.to(receiverId).emit('receiveMessage', message);\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n    }\r\n  });\r\n\r\n  socket.on('disconnect', () => {\r\n    console.log('User disconnected:', socket.id);\r\n  });\r\n});\r\n\r\nconst PORT = process.env.PORT || 5000;\r\nserver.listen(PORT, () => console.log(`Server running on port ${PORT}`));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}