{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alina\\\\Desktop\\\\twitter\\\\twitter\\\\src\\\\Pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport CreatePostModal from '../Components/Post';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n  const [tweets, setTweets] = useState([]);\n  const [showModal, setShowModal] = useState(true);\n  const handleClose = () => setShowModal(true);\n  const handleShow = () => setShowModal(true);\n  useEffect(() => {\n    fetchTweets();\n  }, []);\n  const fetchTweets = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/posts');\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setTweets(data); // Assuming data is an array of tweets with createdAt, postText, and media (Blob)\n    } catch (error) {\n      console.error('Error fetching tweets:', error);\n    }\n  };\n  const renderMedia = blob => {\n    if (blob instanceof Blob) {\n      const url = URL.createObjectURL(blob);\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: url,\n        alt: \"Tweet Media\",\n        className: \"img-fluid rounded mb-3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 14\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: tweets.map(tweet => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card mb-3 bg-black text-white rounded border border-gray\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex align-items-center mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://github.com/mdo.png\" // Replace with actual avatar URL if available in tweet data\n            ,\n            alt: \"Avatar\",\n            className: \"rounded-circle me-3\",\n            width: 50,\n            height: 50\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title mb-0\",\n              children: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 11\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-white\",\n              children: \"@handle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 11\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: tweet.postText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 7\n        }, this), \" \", tweet.media && renderMedia(tweet.media), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-gray\",\n          children: tweet.createdAt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 7\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }, this)\n    }, tweet.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 3\n    }, this))\n  }, void 0, false);\n}\n_s(Home, \"Ig5nLHx4dRC6aNrtZCsKOwChAc8=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","CreatePostModal","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","tweets","setTweets","showModal","setShowModal","handleClose","handleShow","fetchTweets","response","fetch","ok","Error","status","data","json","error","console","renderMedia","blob","Blob","url","URL","createObjectURL","src","alt","className","fileName","_jsxFileName","lineNumber","columnNumber","children","map","tweet","width","height","postText","media","createdAt","id","_c","$RefreshReg$"],"sources":["C:/Users/Alina/Desktop/twitter/twitter/src/Pages/Home.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap-icons/font/bootstrap-icons.css';\r\nimport CreatePostModal from '../Components/Post';\r\nexport default function Home() {\r\n  const [tweets, setTweets] = useState([]);\r\n  const [showModal, setShowModal] = useState(true);\r\n\r\n  const handleClose = () => setShowModal(true);\r\n  const handleShow = () => setShowModal(true);\r\n  useEffect(() => {\r\n    fetchTweets();\r\n  }, []);\r\n\r\n  const fetchTweets = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/posts');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      setTweets(data); // Assuming data is an array of tweets with createdAt, postText, and media (Blob)\r\n    } catch (error) {\r\n      console.error('Error fetching tweets:', error);\r\n    }\r\n  };\r\n\r\n  const renderMedia = (blob) => {\r\n    if (blob instanceof Blob) {\r\n      const url = URL.createObjectURL(blob);\r\n      return <img src={url} alt=\"Tweet Media\" className=\"img-fluid rounded mb-3\" />;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n<>\r\n\r\n{tweets.map(tweet => (\r\n  <div key={tweet.id} className=\"card mb-3 bg-black text-white rounded border border-gray\">\r\n    <div className=\"card-body\">\r\n      <div className=\"d-flex align-items-center mb-3\">\r\n        <img\r\n          src=\"https://github.com/mdo.png\" // Replace with actual avatar URL if available in tweet data\r\n          alt=\"Avatar\"\r\n          className=\"rounded-circle me-3\"\r\n          width={50}\r\n          height={50}\r\n        />\r\n        <div>\r\n          <h5 className=\"card-title mb-0\">Username</h5> {/* Replace with actual username if available in tweet data */}\r\n          <span className=\"text-white\">@handle</span> {/* Replace with actual handle if available in tweet data */}\r\n        </div>\r\n      </div>\r\n      <p className=\"card-text\">{tweet.postText}</p> {/* Display tweet text */}\r\n      {tweet.media && renderMedia(tweet.media)}\r\n      <div className=\"text-gray\">{tweet.createdAt}</div> {/* Display tweet creation date */}\r\n    </div>\r\n  </div>\r\n))}\r\n\r\n</>\r\n   \r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}