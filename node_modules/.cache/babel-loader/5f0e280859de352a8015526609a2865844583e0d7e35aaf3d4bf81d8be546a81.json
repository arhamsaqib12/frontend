{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alina\\\\Desktop\\\\twitter\\\\twitter\\\\src\\\\Pages\\\\comment.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Form, Button, ListGroup, Alert } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comment = ({\n  postId\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [error, setError] = useState(null);\n  const token = localStorage.getItem('token'); // Get the token from local storage\n  const userid = localStorage.getItem('userId');\n  // Fetch comments for the post\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await fetch(`https://twit-backend-production.up.railway.app/api/posts/comments?twitterId=${postId}`, {\n          headers: {\n            'Authorization': `${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setComments(data);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n        setError('Failed to load comments');\n      }\n    };\n    fetchComments();\n  }, [postId, token]);\n\n  // Handle new comment submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('https://twit-backend-production.up.railway.app/api/posts/comments', {\n        method: 'POST',\n        headers: {\n          'Authorization': `${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content: newComment,\n          userId: 1,\n          twitterId: postId\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      setNewComment('');\n      // Fetch updated comments\n      const updatedCommentsResponse = await fetch(`https://twit-backend-production.up.railway.app/api/posts/comments?twitterId=${postId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!updatedCommentsResponse.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const updatedCommentsData = await updatedCommentsResponse.json();\n      setComments(updatedCommentsData);\n    } catch (error) {\n      console.error('Error adding comment:', error);\n      setError('Failed to add comment');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"textarea\",\n          rows: 3,\n          value: newComment,\n          onChange: e => setNewComment(e.target.value),\n          placeholder: \"Add a comment...\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n      className: \"mt-3\",\n      children: comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [comment.user.name, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this), \" \", comment.content]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n        children: \"No comments yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(Comment, \"bRt3+XuucTXCkJLe6pQiJRUUvys=\");\n_c = Comment;\nexport default Comment;\nvar _c;\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"names":["React","useState","useEffect","Container","Form","Button","ListGroup","Alert","jsxDEV","_jsxDEV","Comment","postId","_s","comments","setComments","newComment","setNewComment","error","setError","token","localStorage","getItem","userid","fetchComments","response","fetch","headers","ok","Error","data","json","console","handleSubmit","e","preventDefault","method","body","JSON","stringify","content","userId","twitterId","updatedCommentsResponse","updatedCommentsData","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","onSubmit","Group","Control","as","rows","value","onChange","target","placeholder","required","type","className","length","map","comment","Item","user","name","id","_c","$RefreshReg$"],"sources":["C:/Users/Alina/Desktop/twitter/twitter/src/Pages/comment.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Form, Button, ListGroup, Alert } from 'react-bootstrap';\r\n\r\nconst Comment = ({ postId }) => {\r\n  const [comments, setComments] = useState([]);\r\n  const [newComment, setNewComment] = useState('');\r\n  const [error, setError] = useState(null);\r\n  const token = localStorage.getItem('token'); // Get the token from local storage\r\nconst userid =localStorage.getItem('userId')\r\n  // Fetch comments for the post\r\n  useEffect(() => {\r\n    const fetchComments = async () => {\r\n      try {\r\n        const response = await fetch(`https://twit-backend-production.up.railway.app/api/posts/comments?twitterId=${postId}`, {\r\n          headers: {\r\n            'Authorization': `${token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n        setComments(data);\r\n      } catch (error) {\r\n        console.error('Error fetching comments:', error);\r\n        setError('Failed to load comments');\r\n      }\r\n    };\r\n\r\n    fetchComments();\r\n  }, [postId, token]);\r\n\r\n  // Handle new comment submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await fetch('https://twit-backend-production.up.railway.app/api/posts/comments', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `${token}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ content: newComment, userId: 1, twitterId: postId }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      setNewComment('');\r\n      // Fetch updated comments\r\n      const updatedCommentsResponse = await fetch(`https://twit-backend-production.up.railway.app/api/posts/comments?twitterId=${postId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      if (!updatedCommentsResponse.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const updatedCommentsData = await updatedCommentsResponse.json();\r\n      setComments(updatedCommentsData);\r\n    } catch (error) {\r\n      console.error('Error adding comment:', error);\r\n      setError('Failed to add comment');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <h3>Comments</h3>\r\n      {error && <Alert variant=\"danger\">{error}</Alert>}\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group>\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            rows={3}\r\n            value={newComment}\r\n            onChange={(e) => setNewComment(e.target.value)}\r\n            placeholder=\"Add a comment...\"\r\n            required\r\n          />\r\n        </Form.Group>\r\n        <Button type=\"submit\" variant=\"primary\">Submit</Button>\r\n      </Form>\r\n      <ListGroup className=\"mt-3\">\r\n        {comments.length > 0 ? (\r\n          comments.map((comment) => (\r\n            <ListGroup.Item key={comment.id}>\r\n              <strong>{comment.user.name}:</strong> {comment.content}\r\n            </ListGroup.Item>\r\n          ))\r\n        ) : (\r\n          <ListGroup.Item>No comments yet.</ListGroup.Item>\r\n        )}\r\n      </ListGroup>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Comment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}