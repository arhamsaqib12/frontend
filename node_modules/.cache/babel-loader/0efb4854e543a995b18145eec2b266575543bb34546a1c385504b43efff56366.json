{"ast":null,"code":"const {\n  Users\n} = require('./usermodal'); // Ensure the correct path\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst secretKey = 'mysecretkey';\nasync function login(req, res) {\n  var _req$body;\n  const {\n    email,\n    password\n  } = (_req$body = req.body) !== null && _req$body !== void 0 ? _req$body : {};\n  try {\n    const user = await Users.findOne({\n      where: {\n        email\n      }\n    });\n    if (!user) {\n      return res.status(401).json(\"User is not registered, please create an account\");\n    }\n    if (!password) {\n      return res.status(401).json(\"Password is required\");\n    }\n    const isEqual = await bcrypt.compare(password, user.dataValues.password);\n    if (!isEqual) {\n      return res.status(401).json(\"Invalid credentials\");\n    }\n    const token = jwt.sign({\n      id: user.id,\n      email: user.email,\n      name: user.name\n    }, secretKey, {\n      expiresIn: '1h'\n    } // Token expiration time\n    );\n    return res.json({\n      token,\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name\n      }\n    });\n  } catch (error) {\n    console.error('Error during login:', error);\n    return res.status(500).json(\"Internal server error\");\n  }\n}\nasync function signup(req, res) {\n  var _req$body2;\n  const {\n    name,\n    email = \"\",\n    password,\n    dateOfBirth\n  } = (_req$body2 = req.body) !== null && _req$body2 !== void 0 ? _req$body2 : {};\n  try {\n    const existingUser = await Users.findOne({\n      where: {\n        email\n      }\n    });\n    if (existingUser) {\n      return res.status(401).json(\"User is already registered\");\n    }\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newUser = await Users.create({\n      name,\n      email,\n      password: hashedPassword,\n      dateOfBirth\n    });\n\n    // Automatically log in the user after signup\n    req.body = {\n      email,\n      password\n    }; // Set the email and password for the login function\n    return login(req, res); // Call the login function\n  } catch (error) {\n    console.error('Error during signup:', error);\n    return res.status(500).json(\"Internal server error\");\n  }\n}\nmodule.exports = {\n  login,\n  signup,\n  secretKey\n};","map":{"version":3,"names":["Users","require","bcrypt","jwt","secretKey","login","req","res","_req$body","email","password","body","user","findOne","where","status","json","isEqual","compare","dataValues","token","sign","id","name","expiresIn","error","console","signup","_req$body2","dateOfBirth","existingUser","hashedPassword","hash","newUser","create","module","exports"],"sources":["C:/Users/Alina/Desktop/twitter/twitter/src/Components/sidebar.jsx"],"sourcesContent":["const { Users } = require('./usermodal'); // Ensure the correct path\r\nconst bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken');\r\nconst secretKey = 'mysecretkey';\r\n\r\nasync function login(req, res) {\r\n  const { email, password } = req.body ?? {};\r\n\r\n  try {\r\n    const user = await Users.findOne({\r\n      where: { email }\r\n    });\r\n\r\n    if (!user) {\r\n      return res.status(401).json(\"User is not registered, please create an account\");\r\n    }\r\n\r\n    if (!password) {\r\n      return res.status(401).json(\"Password is required\");\r\n    }\r\n\r\n    const isEqual = await bcrypt.compare(password, user.dataValues.password);\r\n\r\n    if (!isEqual) {\r\n      return res.status(401).json(\"Invalid credentials\");\r\n    }\r\n\r\n    const token = jwt.sign(\r\n      {\r\n        id: user.id,\r\n        email: user.email,\r\n        name: user.name,\r\n      },\r\n      secretKey,\r\n      { expiresIn: '1h' } // Token expiration time\r\n    );\r\n\r\n    return res.json({\r\n      token,\r\n      user: {\r\n        id: user.id,\r\n        email: user.email,\r\n        name: user.name,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error during login:', error);\r\n    return res.status(500).json(\"Internal server error\");\r\n  }\r\n}\r\n\r\nasync function signup(req, res) {\r\n  const { name, email = \"\", password, dateOfBirth } = req.body ?? {};\r\n\r\n  try {\r\n    const existingUser = await Users.findOne({\r\n      where: { email }\r\n    });\r\n\r\n    if (existingUser) {\r\n      return res.status(401).json(\"User is already registered\");\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    const newUser = await Users.create({\r\n      name,\r\n      email,\r\n      password: hashedPassword,\r\n      dateOfBirth,\r\n    });\r\n\r\n    // Automatically log in the user after signup\r\n    req.body = { email, password }; // Set the email and password for the login function\r\n    return login(req, res); // Call the login function\r\n  } catch (error) {\r\n    console.error('Error during signup:', error);\r\n    return res.status(500).json(\"Internal server error\");\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  login,\r\n  signup,\r\n  secretKey,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}