{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alina\\\\Desktop\\\\twitter\\\\twitter\\\\src\\\\Pages\\\\chat.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst Chat = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]); // State to store users\n  const [otherUserId, setOtherUserId] = useState(null);\n  const userToken = localStorage.getItem('token'); // Get the token from local storage\n  const userId = userToken ? parseJwt(userToken).id : null; // Assume the token contains the user ID in its payload\n\n  const roomId = otherUserId ? generateRoomId(userId, otherUserId) : null;\n  useEffect(() => {\n    if (!userId) return; // Early return if userId is not available\n\n    // Fetch users from the API\n    const fetchUsers = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/posts/user', {\n          headers: {\n            'Authorization': `${localStorage.getItem(token)}`\n          }\n        });\n        setUsers(response.data);\n      } catch (error) {\n        console.error('Error fetching users:', error);\n      }\n    };\n    fetchUsers();\n    if (roomId) {\n      // Join the room\n      socket.emit('joinRoom', {\n        roomId,\n        userId\n      });\n\n      // Listen for messages\n      socket.on('message', message => {\n        console.log('Received message:', message); // Debugging\n        setMessages(prevMessages => [...prevMessages, message]);\n      });\n      return () => {\n        socket.off('message');\n      };\n    }\n  }, [roomId, userId, otherUserId]);\n  const sendMessage = () => {\n    if (message.trim() === '' || !roomId) return; // Do not send empty messages or if roomId is not available\n\n    socket.emit('chatMessage', {\n      roomId,\n      message\n    });\n    setMessage(''); // Clear the input after sending\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select a User to Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setOtherUserId(user.id),\n          children: user.name\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: msg\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n// Helper function to decode the JWT token\n_s(Chat, \"x6Ru2OhkZH4PUmz1bxwD0Okvgsc=\");\n_c = Chat;\nfunction parseJwt(token) {\n  if (!token) {\n    return {};\n  }\n  const base64Url = token.split('.')[1];\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n  return JSON.parse(jsonPayload);\n}\nfunction generateRoomId(userId1, userId2) {\n  const sortedIds = [userId1, userId2].sort();\n  return `${sortedIds[0]}_${sortedIds[1]}`;\n}\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useState","io","axios","jsxDEV","_jsxDEV","socket","Chat","_s","message","setMessage","messages","setMessages","users","setUsers","otherUserId","setOtherUserId","userToken","localStorage","getItem","userId","parseJwt","id","roomId","generateRoomId","fetchUsers","response","get","headers","token","data","error","console","emit","on","log","prevMessages","off","sendMessage","trim","children","fileName","_jsxFileName","lineNumber","columnNumber","map","user","onClick","name","msg","index","type","value","onChange","e","target","_c","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","c","charCodeAt","toString","slice","join","JSON","parse","userId1","userId2","sortedIds","sort","$RefreshReg$"],"sources":["C:/Users/Alina/Desktop/twitter/twitter/src/Pages/chat.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst Chat = () => {\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [users, setUsers] = useState([]); // State to store users\r\n    const [otherUserId, setOtherUserId] = useState(null);\r\n    const userToken = localStorage.getItem('token'); // Get the token from local storage\r\n    const userId = userToken ? parseJwt(userToken).id : null; // Assume the token contains the user ID in its payload\r\n\r\n    const roomId = otherUserId ? generateRoomId(userId, otherUserId) : null;\r\n\r\n    useEffect(() => {\r\n        if (!userId) return; // Early return if userId is not available\r\n\r\n        // Fetch users from the API\r\n        const fetchUsers = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:5000/api/posts/user', {\r\n                    headers: { 'Authorization': `${localStorage.getItem(token)}` }\r\n                });\r\n                setUsers(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching users:', error);\r\n            }\r\n        };\r\n\r\n        fetchUsers();\r\n\r\n        if (roomId) {\r\n            // Join the room\r\n            socket.emit('joinRoom', { roomId, userId });\r\n\r\n            // Listen for messages\r\n            socket.on('message', (message) => {\r\n                console.log('Received message:', message); // Debugging\r\n                setMessages((prevMessages) => [...prevMessages, message]);\r\n            });\r\n\r\n            return () => {\r\n                socket.off('message');\r\n            };\r\n        }\r\n    }, [roomId, userId, otherUserId]);\r\n\r\n    const sendMessage = () => {\r\n        if (message.trim() === '' || !roomId) return; // Do not send empty messages or if roomId is not available\r\n\r\n        socket.emit('chatMessage', { roomId, message });\r\n        setMessage(''); // Clear the input after sending\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>Select a User to Chat</h3>\r\n                <ul>\r\n                    {users.map((user) => (\r\n                        <li key={user.id} onClick={() => setOtherUserId(user.id)}>\r\n                            {user.name}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n            <div>\r\n                <h3>Chat</h3>\r\n                <div>\r\n                    {messages.map((msg, index) => (\r\n                        <div key={index}>{msg}</div>\r\n                    ))}\r\n                </div>\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                />\r\n                <button onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Helper function to decode the JWT token\r\nfunction parseJwt(token) {\r\n    if (!token) { return {}; }\r\n    const base64Url = token.split('.')[1];\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n    }).join(''));\r\n    return JSON.parse(jsonPayload);\r\n}\r\n\r\nfunction generateRoomId(userId1, userId2) {\r\n    const sortedIds = [userId1, userId2].sort();\r\n    return `${sortedIds[0]}_${sortedIds[1]}`;\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,CAAC;AAE1C,MAAMK,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMgB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EACjD,MAAMC,MAAM,GAAGH,SAAS,GAAGI,QAAQ,CAACJ,SAAS,CAAC,CAACK,EAAE,GAAG,IAAI,CAAC,CAAC;;EAE1D,MAAMC,MAAM,GAAGR,WAAW,GAAGS,cAAc,CAACJ,MAAM,EAAEL,WAAW,CAAC,GAAG,IAAI;EAEvEf,SAAS,CAAC,MAAM;IACZ,IAAI,CAACoB,MAAM,EAAE,OAAO,CAAC;;IAErB;IACA,MAAMK,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAAC,sCAAsC,EAAE;UACrEC,OAAO,EAAE;YAAE,eAAe,EAAE,GAAGV,YAAY,CAACC,OAAO,CAACU,KAAK,CAAC;UAAG;QACjE,CAAC,CAAC;QACFf,QAAQ,CAACY,QAAQ,CAACI,IAAI,CAAC;MAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MACjD;IACJ,CAAC;IAEDN,UAAU,CAAC,CAAC;IAEZ,IAAIF,MAAM,EAAE;MACR;MACAjB,MAAM,CAAC2B,IAAI,CAAC,UAAU,EAAE;QAAEV,MAAM;QAAEH;MAAO,CAAC,CAAC;;MAE3C;MACAd,MAAM,CAAC4B,EAAE,CAAC,SAAS,EAAGzB,OAAO,IAAK;QAC9BuB,OAAO,CAACG,GAAG,CAAC,mBAAmB,EAAE1B,OAAO,CAAC,CAAC,CAAC;QAC3CG,WAAW,CAAEwB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE3B,OAAO,CAAC,CAAC;MAC7D,CAAC,CAAC;MAEF,OAAO,MAAM;QACTH,MAAM,CAAC+B,GAAG,CAAC,SAAS,CAAC;MACzB,CAAC;IACL;EACJ,CAAC,EAAE,CAACd,MAAM,EAAEH,MAAM,EAAEL,WAAW,CAAC,CAAC;EAEjC,MAAMuB,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAI7B,OAAO,CAAC8B,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAAChB,MAAM,EAAE,OAAO,CAAC;;IAE9CjB,MAAM,CAAC2B,IAAI,CAAC,aAAa,EAAE;MAAEV,MAAM;MAAEd;IAAQ,CAAC,CAAC;IAC/CC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;EACpB,CAAC;EAED,oBACIL,OAAA;IAAAmC,QAAA,gBACInC,OAAA;MAAAmC,QAAA,gBACInC,OAAA;QAAAmC,QAAA,EAAI;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9BvC,OAAA;QAAAmC,QAAA,EACK3B,KAAK,CAACgC,GAAG,CAAEC,IAAI,iBACZzC,OAAA;UAAkB0C,OAAO,EAAEA,CAAA,KAAM/B,cAAc,CAAC8B,IAAI,CAACxB,EAAE,CAAE;UAAAkB,QAAA,EACpDM,IAAI,CAACE;QAAI,GADLF,IAAI,CAACxB,EAAE;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEZ,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eACNvC,OAAA;MAAAmC,QAAA,gBACInC,OAAA;QAAAmC,QAAA,EAAI;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACbvC,OAAA;QAAAmC,QAAA,EACK7B,QAAQ,CAACkC,GAAG,CAAC,CAACI,GAAG,EAAEC,KAAK,kBACrB7C,OAAA;UAAAmC,QAAA,EAAkBS;QAAG,GAAXC,KAAK;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAC9B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACNvC,OAAA;QACI8C,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE3C,OAAQ;QACf4C,QAAQ,EAAGC,CAAC,IAAK5C,UAAU,CAAC4C,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC,eACFvC,OAAA;QAAQ0C,OAAO,EAAET,WAAY;QAAAE,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;;AAED;AAAApC,EAAA,CAhFMD,IAAI;AAAAiD,EAAA,GAAJjD,IAAI;AAiFV,SAASc,QAAQA,CAACQ,KAAK,EAAE;EACrB,IAAI,CAACA,KAAK,EAAE;IAAE,OAAO,CAAC,CAAC;EAAE;EACzB,MAAM4B,SAAS,GAAG5B,KAAK,CAAC6B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACrC,MAAMC,MAAM,GAAGF,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAC9D,MAAMC,WAAW,GAAGC,kBAAkB,CAACC,IAAI,CAACJ,MAAM,CAAC,CAACD,KAAK,CAAC,EAAE,CAAC,CAACb,GAAG,CAAC,UAASmB,CAAC,EAAE;IAC1E,OAAO,GAAG,GAAG,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;EAChE,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;EACZ,OAAOC,IAAI,CAACC,KAAK,CAACT,WAAW,CAAC;AAClC;AAEA,SAASrC,cAAcA,CAAC+C,OAAO,EAAEC,OAAO,EAAE;EACtC,MAAMC,SAAS,GAAG,CAACF,OAAO,EAAEC,OAAO,CAAC,CAACE,IAAI,CAAC,CAAC;EAC3C,OAAO,GAAGD,SAAS,CAAC,CAAC,CAAC,IAAIA,SAAS,CAAC,CAAC,CAAC,EAAE;AAC5C;AAEA,eAAelE,IAAI;AAAC,IAAAiD,EAAA;AAAAmB,YAAA,CAAAnB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}