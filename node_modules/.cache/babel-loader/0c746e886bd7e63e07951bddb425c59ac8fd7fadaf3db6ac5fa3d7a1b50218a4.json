{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alina\\\\Desktop\\\\twitter\\\\twitter\\\\src\\\\Pages\\\\chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { Button, ListGroup, ListGroupItem, Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst Chat = ({\n  currentUser\n}) => {\n  _s();\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [messageInput, setMessageInput] = useState('');\n  const [chatPartners, setChatPartners] = useState([]);\n  useEffect(() => {\n    // Fetch the list of users\n    const fetchUsers = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/posts/user', {\n          headers: {\n            'Authorization': `${localStorage.getItem('token')}`\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setChatPartners(data);\n      } catch (error) {\n        console.error('Error fetching users:', error);\n      }\n    };\n    fetchUsers();\n  }, []);\n  useEffect(() => {\n    if (selectedUser) {\n      socket.emit('joinRoom', {\n        userId: currentUser.id,\n        chatPartnerId: selectedUser.id\n      });\n      socket.on('message', messageData => {\n        setMessages(prevMessages => [...prevMessages, messageData]);\n      });\n    }\n    return () => {\n      if (selectedUser) {\n        socket.off('message');\n      }\n    };\n  }, [selectedUser]);\n  const sendMessage = () => {\n    if (messageInput.trim() && selectedUser) {\n      socket.emit('message', {\n        senderId: currentUser.id,\n        receiverId: selectedUser.id,\n        message: messageInput\n      });\n      setMessageInput('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-4\",\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          children: chatPartners.map(partner => /*#__PURE__*/_jsxDEV(ListGroupItem, {\n            onClick: () => setSelectedUser(partner),\n            active: (selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.id) === partner.id,\n            children: partner.name\n          }, partner.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-8\",\n        children: selectedUser && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Chat with \", selectedUser.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-box\",\n            children: messages.filter(msg => msg.senderId === currentUser.id && msg.receiverId === selectedUser.id || msg.senderId === selectedUser.id && msg.receiverId === currentUser.id).map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: msg.senderId === currentUser.id ? 'message-sent' : 'message-received',\n              children: msg.message\n            }, msg.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            value: messageInput,\n            onChange: e => setMessageInput(e.target.value),\n            placeholder: \"Type your message...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: sendMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"N9T/jagRLW2tKGD1FhhlbxaEGbA=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","io","Button","ListGroup","ListGroupItem","Form","jsxDEV","_jsxDEV","socket","Chat","currentUser","_s","selectedUser","setSelectedUser","messages","setMessages","messageInput","setMessageInput","chatPartners","setChatPartners","fetchUsers","response","fetch","headers","localStorage","getItem","ok","Error","data","json","error","console","emit","userId","id","chatPartnerId","on","messageData","prevMessages","off","sendMessage","trim","senderId","receiverId","message","className","children","map","partner","onClick","active","name","fileName","_jsxFileName","lineNumber","columnNumber","filter","msg","Control","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Alina/Desktop/twitter/twitter/src/Pages/chat.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { Button, ListGroup, ListGroupItem, Form } from 'react-bootstrap';\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst Chat = ({ currentUser }) => {\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [messageInput, setMessageInput] = useState('');\r\n  const [chatPartners, setChatPartners] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch the list of users\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/posts/user',{\r\n\r\n            headers: {\r\n                'Authorization': `${localStorage.getItem('token')}`\r\n              } \r\n        });\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n        setChatPartners(data);\r\n      } catch (error) {\r\n        console.error('Error fetching users:', error);\r\n      }\r\n    };\r\n\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedUser) {\r\n      socket.emit('joinRoom', { userId: currentUser.id, chatPartnerId: selectedUser.id });\r\n\r\n      socket.on('message', (messageData) => {\r\n        setMessages((prevMessages) => [...prevMessages, messageData]);\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (selectedUser) {\r\n        socket.off('message');\r\n      }\r\n    };\r\n  }, [selectedUser]);\r\n\r\n  const sendMessage = () => {\r\n    if (messageInput.trim() && selectedUser) {\r\n      socket.emit('message', {\r\n        senderId: currentUser.id,\r\n        receiverId: selectedUser.id,\r\n        message: messageInput\r\n      });\r\n      setMessageInput('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4\">\r\n          <ListGroup>\r\n            {chatPartners.map((partner) => (\r\n              <ListGroupItem\r\n                key={partner.id}\r\n                onClick={() => setSelectedUser(partner)}\r\n                active={selectedUser?.id === partner.id}\r\n              >\r\n                {partner.name}\r\n              </ListGroupItem>\r\n            ))}\r\n          </ListGroup>\r\n        </div>\r\n        <div className=\"col-md-8\">\r\n          {selectedUser && (\r\n            <div>\r\n              <h3>Chat with {selectedUser.name}</h3>\r\n              <div className=\"chat-box\">\r\n                {messages\r\n                  .filter((msg) =>\r\n                    (msg.senderId === currentUser.id && msg.receiverId === selectedUser.id) ||\r\n                    (msg.senderId === selectedUser.id && msg.receiverId === currentUser.id)\r\n                  )\r\n                  .map((msg) => (\r\n                    <div key={msg.id} className={msg.senderId === currentUser.id ? 'message-sent' : 'message-received'}>\r\n                      {msg.message}\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n              <Form.Control\r\n                type=\"text\"\r\n                value={messageInput}\r\n                onChange={(e) => setMessageInput(e.target.value)}\r\n                placeholder=\"Type your message...\"\r\n              />\r\n              <Button onClick={sendMessage}>Send</Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}